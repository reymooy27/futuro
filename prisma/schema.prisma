// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"

}

model Example {
    id        Int   @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                Int  @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           Int   @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            Int    @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    teams   Team[]
    tournaments Tournament[]
    playerInTeams Team[] @relation("Player")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Team{
    id Int @id @default(autoincrement())
    name String
    image String?
    userId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    homeMatches Match[] @relation("HomeTeam")
    awayMatches Match[] @relation("AwayTeam")
    players User[] @relation("Player")
    tournaments Tournament[]
    @@index([userId])
}

model Match{
    id Int @id @default(autoincrement())
    date DateTime
    homeTeamId Int
    homeTeam Team @relation("HomeTeam", fields: [homeTeamId], references: [id])
    awayTeamId Int
    awayTeam Team @relation("AwayTeam", fields: [awayTeamId], references: [id])
    homeScore Int @default(0)
    awayScore Int @default(0)
    tournamentId Int
    tournaments Tournament @relation(fields: [tournamentId],references: [id])
    @@index([homeTeamId])
    @@index([awayTeamId])
    @@index([tournamentId])
}

model Tournament{
    id Int @id @default(autoincrement())
    name String
    image String?
    startDate DateTime?
    endDate DateTime?
    createdAt DateTime @default(now())
    matches Match[]
    teams Team[]
    userId Int
    user User @relation(fields: [userId], references: [id])

    @@index([userId])
}